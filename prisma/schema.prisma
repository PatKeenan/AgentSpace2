// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Subscription {
    id           String    @id @default(uuid())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    type         String
    status       String // active, canceled, expired
    workspace    Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId  String    @unique
    paymentToken String
    paymentId    String
    paymentType  String
    paymentDate  DateTime
    paymentData  Json
    paymentError Json
    expiresAt    DateTime
    canceledAt   DateTime?
    canceledBy   String?
    canceledData Json?
    canceledNote String?

    @@unique([workspaceId, type])
}

model WorkspaceUser {
    id          String              @id @default(uuid())
    workspace   Workspace           @relation(fields: [workspaceId], references: [id])
    workspaceId String
    userId      String?
    email       String? // Email is used to invite users to a workspace
    role        Role
    status      WorkspaceUserStatus
}

model Workspace {
    id           String          @id @default(uuid())
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
    ownerId      String
    name         String
    subscription Subscription?
    users        WorkspaceUser[]
    tasks        Task[]
}

model Task {
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
    status      String // open, closed
    description String
}

enum WorkspaceUserStatus {
    ACTIVE
    INVITED
    BANNED // Can be used to ban a user from a workspace without removing them from the workspace
    REMOVED
}

enum Role {
    OWNER
    ADMIN
    EDITOR
    VIEWER
}
